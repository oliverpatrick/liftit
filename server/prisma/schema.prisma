// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  createdAt  DateTime @default(now())
  workoutPlans UserWorkoutPlan[]
  createdWorkoutPlans WorkoutPlan[] @relation("UserCreatedWorkoutPlans")
  exerciseLogs ExerciseLog[]
}

model WorkoutPlan {
  id         Int      @id @default(autoincrement())
  name       String
  description String?
  isGlobal   Boolean  @default(false)
  createdBy  User?    @relation("UserCreatedWorkoutPlans", fields: [createdById], references: [id])
  createdById Int?
  createdAt  DateTime @default(now())
  workouts   Workout[]
  users      UserWorkoutPlan[]
}

model UserWorkoutPlan {
  userId        Int
  workoutPlanId Int
  assignedAt    DateTime @default(now())
  user          User @relation(fields: [userId], references: [id])
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  @@id([userId, workoutPlanId])
}

model Workout {
  id             Int      @id @default(autoincrement())
  workoutPlan    WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId  Int
  name           String
  dayOfWeek      Int @default(1)
  createdAt      DateTime @default(now())
  exercises      WorkoutExercise[]
  exerciseLogs   ExerciseLog[]
}

model Exercise {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  category     String?
  muscleGroup  String?
  equipment    String?
  type         String?
  difficulty   Int @default(1)
  workoutExercises WorkoutExercise[]
  exerciseLogs ExerciseLog[]
}

model WorkoutExercise {
  id           Int      @id @default(autoincrement())
  workout      Workout @relation(fields: [workoutId], references: [id])
  workoutId    Int
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId   Int
  defaultSets  Int @default(1)
  defaultReps  Int @default(1)
  defaultUnit  Int @default(1)
  defaultWeight Decimal? @default(0.0)
  orderIndex   Int @default(1)
}

model ExerciseLog {
  id           Int      @id @default(autoincrement())
  user         User @relation(fields: [userId], references: [id])
  userId       Int
  workout      Workout @relation(fields: [workoutId], references: [id])
  workoutId    Int
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId   Int
  sets         Int @default(1)
  reps         Int @default(1)
  unit         Int @default(1)
  weight       Decimal? @default(0.0)
  completedAt  DateTime @default(now())
}
