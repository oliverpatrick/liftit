// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  id: string;
  createdAt: string;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Meta = {
  page: number;
  total: number;
  totalPages: number;
};

export type User = Entity<{
  name: string;
  email: string;
  avatar?: string;
}>;

// Represents a single workout plan, including overall settings and an array of workouts.
export type WorkoutPlan = {
  id: number;
  name: string;
  description?: string;
  isGlobal: boolean;
  createdBy?: User;
  createdById?: number;
  createdAt: Date;
  workouts: Workout[];
  users: UserWorkoutPlan[];
};

// Represents the relationship between a user and a workout plan.
export type UserWorkoutPlan = {
  userId: number;
  workoutPlanId: number;
  assignedAt: Date;
  user: User;
  workoutPlan: WorkoutPlan;
};

// Represents a single workout, including day of the week and a collection of exercises.
export type Workout = {
  id: number;
  workoutPlanId: number;
  workoutPlan: WorkoutPlan;
  name: string;
  dayOfWeek: number;
  createdAt: Date;
  exercises: WorkoutExercise[];
  exerciseLogs: ExerciseLog[];
};

// Represents a single exercise with various properties such as category, muscle group, and difficulty.
export type Exercise = {
  id: number;
  name: string;
  category?: string;
  muscleGroup?: string;
  equipment?: string;
  type?: string;
  difficulty: number;
  workoutExercises: WorkoutExercise[];
  exerciseLogs: ExerciseLog[];
};

// Represents an individual workout exercise, including sets, reps, and order index.
export type WorkoutExercise = {
  id: number;
  workoutId: number;
  workout: Workout;
  exerciseId: number;
  exercise: Exercise;
  defaultSets: number;
  defaultReps: number;
  defaultUnit: number;
  defaultWeight?: number;
  orderIndex: number;
};

// Represents an exercise log, which tracks user progress for a specific exercise.
export type ExerciseLog = {
  id: number;
  userId: number;
  user: User;
  workoutId: number;
  workout: Workout;
  exerciseId: number;
  exercise: Exercise;
  sets: number;
  reps: number;
  unit: number;
  weight?: number;
  completedAt: Date;
};

// Represents the rep range for an exercise.
export type Reps = {
  min: number;
  max: number;
  unit?: string; // e.g., "seconds" (optional)
};

// Represents a single exercise with warmup, main exercises, and optionally supersets.
export interface ExerciseDetails {
  exerciseName: string;
  sets: number;
  reps: Reps;
  category: string[];
  subCategory: string[];
}

// Represents a superset group, which is an array of exercises performed consecutively.
export interface Superset {
  group: ExerciseDetails[];
}

// Represents a workout day, including warmups, main exercises, and optionally supersets.
export interface Day {
  id: number;
  name: string;
  warmups: ExerciseDetails[];
  exercises: ExerciseDetails[];
  supersets?: Superset[];
}
